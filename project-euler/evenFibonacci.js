// Each new term in the Fibonacci sequence is generated by adding the 
// previous two terms. By starting with 1 and 2, the first 10 terms 
// will be:
// 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
// By considering the terms in the Fibonacci sequence whose values do not 
// exceed four million, find the sum of the even-valued terms.



// const fibonacci = (n) => {
//   if(n<3) return 1
//   return fibonacci(n-1) + fibonacci(n-2)
// }

function fibMemo(index, cache) {
	cache = cache || [];
	if (cache[index]) return cache[index];
	else {
		if (index < 3) return 1;
		else cache[index] = fibMemo(index - 1, cache) + fibMemo(index - 2, cache);
	}
	return cache[index];
}

const sumEvenFibonacci = (n) => {
  let sumOfEven = 0
  let count = 1 
  let currentNumber = 0
  while (currentNumber<n) {
    currentNumber = fibMemo(count)
    if(count % 3 ===0 )sumOfEven += currentNumber
    count += 1
  }
  return sumOfEven
}


console.log(sumEvenFibonacci(4000000))
